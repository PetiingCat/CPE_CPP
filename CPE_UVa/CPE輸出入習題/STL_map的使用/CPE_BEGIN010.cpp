/**
 * (BEGIN010) STL-map-任兩數之和 : 輸入數列，每列為一個測試案例。
 * 每一個案例內含數個數字。
 * 請將每個案例內的數字，任選兩個數字相加，將所有和的次數統計，
 * 依照和的大小，由小到大輸出。
 */

#include <iostream>
#include <map>
#include <string>
#include <vector>
#include <sstream>
using namespace std;
int main()
{
    string s;

    while (getline(cin, s))
    {

        istringstream sin(s);
        vector<int> a;
        __int64 v;
        while (sin >> v)
        {
            a.push_back(v);
        }

        map<__int64, int> sum; //此資料結構是用紅黑樹製作，map有映射的效果，宣告時能自訂哪兩種型態做映射
        for (int k = 0; k < a.size(); k++)
            for (int h = k + 1; h < a.size(); h++) //!!!!數字兩兩相加之和，應為原數字加上下一個數字，不能重複
                sum[a[k] + a[h]]++;
        for (map<__int64, int>::iterator p = sum.begin(); p != sum.end(); p++)
        {
            cout << (*p).first << ":" << (*p).second << endl;
        }
        cout << endl;
    }
}

/**
 * 標準輸入串:
 * 2 1 8 0 8 3 0 1 9 9
 * 1 1 9 5 1 3 1 4 6
 * 4 6 2 8 9 5 4 6 8 5 6 9 4 8
 * 2 3 0 1 2
 * 8 7 4 0 9 5 4 3 9
 * 5 4 8 5 5 6 7 8 9 3 8 3
 * 7 4 4 3 8 3 3 0 6 2 1 6
 * 6 3 9 0 6 9 9 8
 * 9 9 0 7 6 2 8 4 1000005635 1000025749 1000016564 1000012805
 * 
 * 正確輸出串:
 * 0:1↵\r\n
 * 1:4↵\r\n
 * 2:3↵\r\n
 * 3:4↵\r\n
 * 4:2↵\r\n
 * 5:1↵\r\n
 * 8:4↵\r\n
 * 9:8↵\r\n
 * 10:6↵\r\n
 * 11:4↵\r\n
 * 12:2↵\r\n
 * 16:1↵\r\n
 * 17:4↵\r\n
 * 18:1↵\r\n
 * ↵\r\n
 * 2:6↵\r\n
 * 4:4↵\r\n
 * 5:4↵\r\n
 * 6:4↵\r\n
 * 7:5↵\r\n
 * 8:1↵\r\n
 * 9:2↵\r\n
 * 10:5↵\r\n
 * 11:1↵\r\n
 * 12:1↵\r\n
 * 13:1↵\r\n
 * 14:1↵\r\n
 * 15:1↵\r\n
 * ↵\r\n
 * 6:3↵\r\n
 * 7:2↵\r\n
 * 8:6↵\r\n
 * 9:6↵\r\n
 * 10:13↵\r\n
 * 11:8↵\r\n
 * 12:12↵\r\n
 * 13:12↵\r\n
 * 14:13↵\r\n
 * 15:6↵\r\n
 * 16:3↵\r\n
 * 17:6↵\r\n
 * 18:1↵\r\n
 * ↵\r\n
 * 1:1↵\r\n
 * 2:2↵\r\n
 * 3:3↵\r\n
 * 4:2↵\r\n
 * 5:2↵\r\n
 * ↵\r\n
 * 3:1↵\r\n
 * 4:2↵\r\n
 * 5:1↵\r\n
 * 7:3↵\r\n
 * 8:3↵\r\n
 * 9:4↵\r\n
 * 10:1↵\r\n
 * 11:3↵\r\n
 * 12:5↵\r\n
 * 13:5↵\r\n
 * 14:2↵\r\n
 * 15:1↵\r\n
 * 16:2↵\r\n
 * 17:2↵\r\n
 * 18:1↵\r\n
 * ↵\r\n
 * 6:1↵\r\n
 * 7:2↵\r\n
 * 8:6↵\r\n
 * 9:5↵\r\n
 * 10:6↵\r\n
 * 11:10↵\r\n
 * 12:8↵\r\n
 * 13:11↵\r\n
 * 14:6↵\r\n
 * 15:4↵\r\n
 * 16:4↵\r\n
 * 17:3↵\r\n
 * ↵\r\n
 * 1:1↵\r\n
 * 2:1↵\r\n
 * 3:4↵\r\n
 * 4:5↵\r\n
 * 5:5↵\r\n
 * 6:7↵\r\n
 * 7:9↵\r\n
 * 8:5↵\r\n
 * 9:8↵\r\n
 * 10:8↵\r\n
 * 11:5↵\r\n
 * 12:3↵\r\n
 * 13:2↵\r\n
 * 14:2↵\r\n
 * 15:1↵\r\n
 * ↵\r\n
 * 3:1↵\r\n
 * 6:2↵\r\n
 * 8:1↵\r\n
 * 9:5↵\r\n
 * 11:1↵\r\n
 * 12:4↵\r\n
 * 14:2↵\r\n
 * 15:6↵\r\n
 * 17:3↵\r\n
 * 18:3↵\r\n
 * ↵\r\n
 * 2:1↵\r\n
 * 4:1↵\r\n
 * 6:2↵\r\n
 * 7:1↵\r\n
 * 8:2↵\r\n
 * 9:3↵\r\n
 * 10:2↵\r\n
 * 11:3↵\r\n
 * 12:1↵\r\n
 * 13:3↵\r\n
 * 14:1↵\r\n
 * 15:3↵\r\n
 * 16:2↵\r\n
 * 17:2↵\r\n
 * 18:1↵\r\n
 * 1000005635:1↵\r\n
 * 1000005637:1↵\r\n
 * 1000005639:1↵\r\n
 * 1000005641:1↵\r\n
 * 1000005642:1↵\r\n
 * 1000005643:1↵\r\n
 * 1000005644:2↵\r\n
 * 1000012805:1↵\r\n
 * 1000012807:1↵\r\n
 * 1000012809:1↵\r\n
 * 1000012811:1↵\r\n
 * 1000012812:1↵\r\n
 * 1000012813:1↵\r\n
 * 1000012814:2↵\r\n
 * 1000016564:1↵\r\n
 * 1000016566:1↵\r\n
 * 1000016568:1↵\r\n
 * 1000016570:1↵\r\n
 * 1000016571:1↵\r\n
 * 1000016572:1↵\r\n
 * 1000016573:2↵\r\n
 * 1000025749:1↵\r\n
 * 1000025751:1↵\r\n
 * 1000025753:1↵\r\n
 * 1000025755:1↵\r\n
 * 1000025756:1↵\r\n
 * 1000025757:1↵\r\n
 * 1000025758:2↵\r\n
 * 2000018440:1↵\r\n
 * 2000022199:1↵\r\n
 * 2000029369:1↵\r\n
 * 2000031384:1↵\r\n
 * 2000038554:1↵\r\n
 * 2000042313:1↵\r\n
 * ↵\r\n
*/